---
title: "Lecture 10 Homework Framework"
format: 
  html:
    self-contained: true
---

```{r setup, include=FALSE}
#| warning: false
library(tidyverse)     # loads the tidyverse tools
library(RPostgres)     # loads the database driver for PostgreSQL
library(connections)   # helps RPostgres work with RStudio
library(keyring)       # access to a local encrypted keychain for passwords
con <- connection_open(RPostgres::Postgres(),
          dbname = "syntheticMGUH2022",
          host = "35.199.26.47",
          user = "hids502_student",
          password = key_get(service = "syntheticmguh", 
                             username = "hids502_student"),
          # Tell the driver to return very large integers as floating point (vs truncating them)
          bigint = "numeric")
knitr::opts_chunk$set(connection = "con")
```

# SyntheticMGUH As Big Data

For this homework you should act as if the report will be distributed, thus cannot return any PHI. **Do not include identifiers such as names or medical record numbers at the individual level in your results** Avoid returning individual rows unless you want to indicate the structure of a result set for some reason - you should be returning summary data at this point.



# Metadata

The Synthea data set holds a `imaging` table with meta data. The meta data describes the modality and type of imaging study. 

 * Present a summary table of the `imaging` to provide an overview of the most common types of imaging studies performed. (Do not return individual rows, summarize and present the data.)
 
### Bodysite counts
 
```{sql connection=con}
SELECT bodysite_description,
   count(*) as studies, count(distinct patient) as patients
FROM imaging_studies
GROUP BY 
     bodysite_description
```

### Modality Counts

```{sql connection=con}
select modality_description, modality_code, 
       count(*) as studies, count(distinct patient) as patients
from imaging_studies 
group by modality_description, modality_code
order by count(*) DESC

```



# Full Text

## Asthma

 * Using free text search, locate all of the patients whose notes indicated they may have asthma. *Do not return the patients, but return a summary of the cohort*
 
### Total number of patients found:

```{sql connection=con}

SELECT count(distinct patient) 
FROM notes
WHERE note_text LIKE '%asthma%' OR note_text LIKE '%Asthma%' 

```

 * How many of the patients you identified have a condition listed as 'asthma' in the `conditions` table?

```{sql connection=con}
WITH asthma_cohort AS (
  SELECT DISTINCT patient
  FROM notes
  WHERE note_text LIKE '%asthma%' OR note_text LIKE '%Asthma%' 
)
SELECT count(DISTINCT conditions.patient)
FROM conditions
  JOIN asthma_cohort
  ON asthma_cohort.patient = conditions.patient
WHERE conditions.description IN ('Asthma', 'Childhood asthma')
```

A simpler version ...

```{sql connection=con}
SELECT COUNT(DISTINCT notes.patient) as asthma_notes_patients, 
       COUNT(DISTINCT conditions.patient) as asthma_notes_and_conditions_patients
FROM notes
LEFT JOIN conditions
  ON conditions.patient = notes.patient
  AND conditions.description IN ('Asthma', 'Childhood asthma')
WHERE note_text LIKE '%asthma%' OR note_text LIKE '%Asthma%' 
```

## Allergies

Some CT scans are done with "contrast", an intravenous form of dye to make the scan results clearer. People with shellfish allergies may have a similar reaction to contrast dye.

 * Allergies are available in Synthea in the allergy table, but in the real world this is not always so clear. Using only the `notes` table, find all the patients that have an shellfish allergy, and then using the `imaging` table determine home many of those patients have had a CT scan.
 
 
```{sql connection=con}
WITH shellfish_cohort AS (
  SELECT DISTINCT patient
  FROM notes
  WHERE note_text LIKE '%shellfish (substance)%' 
)
SELECT count(DISTINCT imaging_studies.patient)
FROM imaging_studies
  INNER JOIN shellfish_cohort
  ON shellfish_cohort.patient = imaging_studies.patient
WHERE modality_code = 'CT'
```


# Patient Matching

 * How many patients in the Synthea database have the same first and last name? 

Hint: You can do this with a `JOIN` approach or a `GROUP BY` approach. If you use the latter you may want to look at the `HAVING` command as a filter.


```{sql connection=con}
WITH duplicated_patients AS (
  SELECT first, last, count(*) - 1  patient_count
  FROM patients
  GROUP BY first, last
  HAVING count(*) > 1
)
SELECT sum(patient_count)
 FROM duplicated_patients
```

### How many have the same first, last, gender and live in the same zip code?

This is a more complicated, but more parsimonious approach using a self join. The self join means we would normally get back self matches (ie, the same patient on the left side matches themselves on the right), but also two rows for each possible match because the match can occur in both directions (eg 12 and 245 as well as 245 and 12).

```{sql connection=con}
WITH duplicated_patients AS (
SELECT p1.id patient1_id, p2.id patient2_id
FROM patients p1
INNER JOIN patients p2 ON
  p1.id > p2.id 
  AND p1.first = p2.first
  AND p1.last = p2.last
  AND p1.gender = p2.gender
  AND p1.zip = p2.zip
)
SELECT COUNT(DISTINCT patient1_id) AS patient_count  
 FROM duplicated_patients

```

# Bonus

* How many patients might have duplicate accounts based on middle name or first name errors? (You may not find any ... but show me how you would approach this.)

```{sql connection=con}
-- Lets just do first names
WITH duplicated_patients AS (
SELECT p1.id patient1_id, p2.id patient2_id
FROM patients p1
INNER JOIN patients p2 ON
  p1.id > p2.id 
  -- Mismatch on first name
  AND p1.first <> p2.first
  -- But we can get to that first name in 1 or two typos
  AND levenshtein(p1.first, p2.first) < 3
  AND p1.last = p2.last
  AND p1.gender = p2.gender
  AND p1.zip = p2.zip
)
SELECT COUNT(DISTINCT patient1_id) AS patient_count  
 FROM duplicated_patients

```

